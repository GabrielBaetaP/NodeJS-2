// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")

}

// ... (generator e datasource)

model Usuario {
  id          String    @id @default(uuid())
  nome        String
  email       String    @unique
  senha       String
  foto        String?
  posts       Post[]
  comentarios Comentario[]
  likes       Like[]

  @@map("usuarios")
}

model Post {
  id        String     @id @default(uuid())
  titulo    String
  conteudo  String
  createdAt DateTime   @default(now()) @map("created_at") // Mapeado
  usuarioId String     @map("usuario_id") // Mapeado
  usuario   Usuario    @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  comentarios Comentario[]
  likes      Like[]

  @@map("posts")
}

model Comentario {
  id        String   @id @default(uuid())
  conteudo  String
  createdAt DateTime @default(now()) @map("created_at") // Mapeado
  usuarioId String   @map("usuario_id") // Mapeado
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id") // Mapeado
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@map("comentarios")
}

model Like {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now()) @map("created_at") // Mapeado
  usuarioId    String      @map("usuario_id") // Mapeado
  usuario      Usuario     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  postId       String?     @map("post_id") // Mapeado
  post         Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  comentarioId String?     @map("comentario_id") // Mapeado
  comentario   Comentario? @relation(fields: [comentarioId], references: [id], onDelete: Cascade)

  @@map("likes")
}